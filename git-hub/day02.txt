day02
원격 레포지토리 -> 자바의 기본 개념 -> 자바 설치

버전
	프로그램을 수정하여 개선한 것
버전 번호
	소프트웨어나 프로젝트의 업데이트 레벨을 식별하는데 사용
	메이저.마이너.패치
버전 관리
	로컬(git), 원격
버전관리시스템
	git

git-hub
	git을 저장하고 공유할 수 있는 서버를 제공하는 사이트
	협업이 가능하다
git 구조
	woking directory
		작업하는 공간
		git init	=> .git

		파일의 상태		untracked
	staging area
		스테이징 영역에 있는 파일들은 git의 관리 대상
		git add 파일명 or .

		파일의 상태		tracked
		tracked 상태의 종류
			unmodified	: 수정이 되지 않은 상태
			modified	: 수정이 된 상태
			staged		: 로컬 저장소에 올릴 준비가 완료된 상태	
	local repository
		staged 상태의 파일을 commit 하면 로컬저장소에 저장된다

	remote repository
		git-hub 원격 저장소
		원격 저장소에 올리기 위해 git-hub 저장공간(repository)을 만들고
		그 주소를 git bash를 이용해 연결해주는 작업이 선행되어야한다
		push(로컬 저장소 -> 원격 저장소) / pull(원격 저장소 -> 로컬 저장소)

1. 원격저장소 관련 명령어
	git remote add 원격저장소이름 git주소
		원격저장소 내 로컬과 연결하는 명령어
	git remote -v
		원격저장소와 로컬이 연결되었는지 확인하는 명령어
		push는 원격 저장소에 파일을 올릴 때 사용
		fetch는 일종의 새로고침 역할
push 하기 전 주의 사항
		원격 저장소에 reame.md 파일을 만들었다면 먼저 pull을 받아야한다!
		아니면 push 를 할 때 -f옵션을 주어서 강제로 올려야하는데 왠만하면 사용하지 않는다

	git push 원격저장소이름 브랜치이름
		로컬 저장소에 커밋한 파일을 원격 저장소에 저장하는 명령어

	git pull 원격저장소이름 브랜치이름
		원격 저장소에 저장한 파일들을 로컬 저장소로 가져오는 명령어

fatal : refusing to merge unrelated histories 에러 발생
	두 깃 저장소에 서로 다른 히스토리를 가지고 있을 때 발생한다
	기본적으로 두 저장소가 공통의 부모 커밋이 없다고 판단되면 나타난다
	발생할 수 있는 경우 
	1) 빈 저장소에서 git init 명령어를 사용해서 새로운 저장소를 만들었을 때
	2) 로컬 저장소를 초기화하고 리모트 저장소를 추가한 후에 리모트 저장소에서 변경 사항을 가져올 때

	해결방안
	git pull origin main --allow-unrelated-histories
	두 저장소의 히스토리를 강제로 병합하는 명령어
	항상 현재 변경사항의 내용을 백업하고 검토한 뒤에 사용해야한다(병합이 문제를 일으킬 가능성이 있기 때문)

2. clone과 pull
	git pull 원격저장소주소 브랜치 이름
		이미 로컬에 존재하는 git 저장소에 원격 저장소의 최신 변경사항을 가져오고 병합하는 작업
		원격 저장소에 새로운 커밋이 추가되었을 때 그 변경사항을 로컬저장소에 반양하기 위해 사용한다
		내부적으로 git pull은 git fetch와 git merge의 조합으로 동작한다
		
	git clone 원격저장소주소 저장할경로
		원격저장소의 전체 복사본을 로컬에 새로 만든다
		새로운 디렉토리가 생성되며 그 안에는 원격저장소의 모든 파일과 폴더, 모든 커밋 히스토리가 포함된다
		처음 저장소를 시작할 때 사용하고 일반적으로 그 후에는 다시 사용되지 않는다

	clone	원격 저장소에 있는 파일들을 복제해서 로컬저장소로 가져오는 명령어
		다른 사람들이 서버에 올려놓은 git저장소를 내 컴퓨터에 똑같이 복사해 오는 용도로 사용한다
		주의사항> 클론을 할 때는 git init을 하지 않는다

[실습]
	gitTest2라는 폴더를 만들고 => 로컬
	깃이 관리하는 폴더로 사용한다 => git init
	test01.txt 파일에 2일차 수업이라고 작성한다  => 로컬
	test02.txt 파일에 2교시 수업중이라고 작성한다 => 로컬
	git status	=> 상태확인
	git add .	=> working directory에 있는 파일들을 staging area 영역으로 올린다
	커밋(커밋 메시지는 날짜 시간 파일생성)한 후에
	git commit -m "241122 11시 7분 파일생성" => 커밋 Local Repository 영역으로 커밋한다
	gitTest2라는 원격 레포지토리에 올린다 => 원격(github)
	(원격 레포지토리에 readme.me 파일 반드시 생성)
	git remote -v
	git remote add origin 주소
	git remote -v
	git pull origin main --allow-unrelated-hostories
	원격 변화x		로컬 변화o readme.md 파일 추가
	git push origin main

	test02.txt 파일의 내용을 2교시 수업중 아래 실습1이라고 작성하고 => 커밋한 뒤
	git status
	git add test02.txt
	git commit -m "파일 수정"
	원격 레포지토리에 한번더 올린다
	git push origin main

커밋 메시지 수정
	git commit --amend
		가장 마지막에 커밋한 내용을 수정할 수 있다
		vi 에디터로 열리게 되고 방향키를 이용해서 수정할 부분으로 이동한 뒤
		(i 현재 커서에서 입력, o 아래줄에서 입력)
		i나 o를 입력한 뒤 메시지 수정 후 esc + : wq 저장하고 나온다

	git commit --amend -m "메시지"

이미 push한 커밋 메시지 수정
	git push --force 브랜치이름

---------------------------------------------------------------------------------
[실습2]
	팀장이 레포지토리 gitClone 만들기 - readme.md 파일 추가
		gitclone.txt 파일을 만들고 팀명과 팀장이름을 추가한다
		본인이 만든 레포지토리에 올린다
	팀원1	팀장이 만든 레포지토리를 클론 딴 뒤
		본인이름을 추가하고 gitClone1 레포지토리에 올린다
	팀원2	팀원1이 만든 레포지토리를 클론 딴 뒤
		본인이름을 추가하고 gitClone2 레포지토리에 올린다
	팀원3	팀원2가 만든 레포지토리를 클론 딴 뒤
		본인이름을 추가하고 gitClone3 레포지토리에 올린다
	팀원4	팀원3이 만든 레포지토리를 클론 딴 뒤
		본인이름을 추가하고 gitClone4 레포지토리에 올린다

	최종 => 팀장은 팀원4가 만든 레포지토리를 클론딴 뒤 gitClone5에 올린다
	팀명 : gitClone5 깃 주소로 단톡방에 공유한다

git remote remove origin
원격 저장소 삭제 명령어
git remote add origin https://github.com/koreait-24/1.git
내 원격레포지토리로 연결하는 명령어
git remote -v
원격레포지토리 확인하는 명령어
git push origin main
로컬레포지토리의 파일(main 브랜치에 있는)을 원격레포지토리로 올리는 명령어

---------------------------------------------------------------------------






































