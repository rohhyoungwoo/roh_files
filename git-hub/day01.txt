day01
git -> git 기초 -> git 원격 저장소

git-hub 가입
notion 가입

1. 버전(version)
	프로그램을 수정하여 개선한 것
	정식버전은 1부터 시작하며 수정이 이루어지면서 버전숫자가 늘어난다
	버전숫자가 변경되는 시점은 기존의 상태에서 소스코드를 추가하거나 삭제하거나 수정하여
	이전과 비교했을 때 유의미한 변화가 있다면 버전이 변경되는 것이다

	작은 변화가 있다면 보통 .을 찍어 표시하고(1.0 -> 1.1 -> 1.2 ...)
	큰 변화가 있다면 앞쪽 숫자를 올린다(1.0 -> 2.0 ...)

1) 버전 번호
	소프트웨어 또는 프로젝트의 없데이트 레벨을 식별하는데 사용된다
	버전번호에는 세가지 성분이 포함된다
	메이저 버전번호, 마이너 버전번호, 패치 버전번호
	메이저 버전번호, 마이너 버전번호

	1.1.1
	메이저 버전번호 1, 마이너 버전번호 1, 패치 버전번호 1

	1.0
	메이저 버전번호 1, 마이너 버전번호 0

2) 버전 관리(version control)
	버전 별로 기록하고 관리하는 것을 의미한다
	버전을 관리하면 백업과 복구가 용이하며, 누가 언제 해당 버전을 만들고 수정했는지 알기 쉽다
	
3) 로컬 버전 관리
	로컬(내컴퓨터)에서 버전을 관리하는 방식이다
	작업하는 내용물을 현재 시점에서 복사해두고 압축하여 보관한다
	간단하게 누구나 할 수 있으므로 자주 사용하지만 실수로 지우거나 잘 못 수정하는 경우가 많다
	
2. 버전 관리 시스템(version control system)
	파일의 변화 내용을 기록, 관리하고 추적을 도와주는 소프트웨어이다

1) git
	git은 여러 버전관리시스템 중 하나이다(로컬에서 사용한다)
	git만의 방식으로 버전별 파일을 저장, 관리한다
	굉장히 빠르고 버전을 분산하여 저장하므로 안전하다
	단, git의 사용방법은 다른 버전관리 시스템에 비해 어렵다는 단점이 있다

2) git-hub
	git을 저장하고 공유할 수 있는 서버를 제공하는 사이트 중 하나이다
	github 서버에 내 git을 저장해두면 다른 pc에서도 쉽게 버전을 관리할 수 있으며
	다른 개발자들과 git을 공유하여 협업이 된다는 장점이 있다

3) git 구조
	git은 크게 3가지 영역으로 나뉘며 각 영역에 순차적으로 파일을 올려줘야한다

1) Working Directory(작업 폴더, 깃 저장소)
	내가 작업하는 공간을 working directory로 설정해둔다
	설정하게 되면 해당 폴더에 .git이라는 폴더가 생긴다
	
	[파일의 상태]
	working directory 영역에 있는 파일들은 아직 git의 관리대상이 아니다
	관리 대상이 아닌 파일들을 untracked 상태라고 한다
  
2) Staging Area(스테이징 영역)
	스테이징 영역에 있는 파일들은 git의 관리 대상이다
	수정, 추가, 삭제 등 이 영역 파일의 변경사항을 git이 저장하고 관리한다

	수정사항을 바로 Local Repositroy에 커밋하면 실수가 많아질 것이기 때문에 스테이징 영역에서
	우선 수정 내용들을 검토하고 확인 후 로컬 저장소에 커밋한다

	[파일의 상태]
	스테이징 영역에 파일을 올리는 것을 staging이라고 한다
	관리 대상 파일을 tracked(추적)상태라고 한다

	- tracked 상태의 종류
	unmodified : 수정이 되지 않은 상태
	modified : 스테이징 영역에 들어온 파일 중 수정이 된 상태
	staged : 로컬 저장소에 올릴 준비가 완료된 상태

3) Local Repository(로컬 저장소)
	스테이징 영역에서 staged 상태의 파일을 commit 하면 로컬저장소에 저장된다
	로컬 저장소에 commit을 한다는 것은 스테이징 영역의 수정사항을 확정짓는 것이다
	즉, 새로운 버전 하나를 만들고 저장한 것이다
	내가 원할 때 언제든 저장한 버전으로(commit한 시점) 돌아올 수 있다
	주의 : staged 상태가 아니면 commit이 되지 않는다

4) Remote Repository(원격 저장소)
	git-hub 같은 사이트 등을 이용하여 어떤 서버에 올려놓고 사용하는 저장소이다
	주로 협업을 위해 사용한다

4. git 설치
	설치 여부 확인
	window + r (실행창) -> cmd 

	설치하기
	구글에 git 검색 > downloads > 64bit-installer 다운받기

5. git 사용하기
1) CLI(Command Line Interface)
	cmd, 터미널 등을 이용하여 명령어로 사용한다
	GUI로 사용하는 것보다 어렵지만 git의 모든 기능을 사용하기 위해서는 CLI로 사용하는 것이 좋다

2) GUI(Graphic User Interface)
	일반 프로그램처럼 눈으로 보고 버튼을 눌러 사용한다
	사용방법은 편리하지만 단순하게 만들어 많은 기능이 없다

6. git 기본 명령어
	git 명령어는 앞에 git을 붙이고 사용한다

	config
		환경설정을 하는 명령어이다
		git 설치 후 반드시 초기 설정을 해줘야한다

	git config --global user.name "깃허브이름"
	git config --global user.email "이메일@주소"

		git-hub와 함께 사용할 것이기 때문에 git-hub 계정의 닉네임과 이메일을 동일하게 설정해야한다
		--global 옵션으로 설정한 내용은 설치 후 딱 한 번만 하면된다
		단, 학원 PC는 공용pc기 때문에 git 설정이 내 계정으로 되어있는지 확인하고 안되어있으면 재설정이 필요하다
	
	git config --list	
	
	git init
		현재 위치의 폴더를 wokring directory(깃 저장소)로 만든다
		.git 숨김 폴더가 생성된다

	
	git status
		현재 깃 저장소에 있는 파일들의 상태를 확인한다

	git add 파일명
	git add .(현재 폴더를 의미한다)
		작업 폴더의 파일을 스테이징 시킨다
		수정된 파일을 staged 상태로 만들기 위해서 사용한다
		파일명을 작성하는 부분에 .을 사용하면 현재 경로의 모든 파일과 변경사항을 스테이징 한다
	
	git commit -m "커밋메시지"
		스테이징 영역의 파일들의 변경사항을 확정짓고 새로운 버전을 로컬 저장소에 저장한다
		커밋을 할 때 어떤 파일에 어떤 수정사항이 있었는지 메시지를 작성하는 것이 좋다
		(메시지 작성하지 않으면 나중에 버전을 되돌릴 때 어떤 시점으로 가야하는지 알 수 없다)

	git log
		git에 저장된 commit 기록을 볼 수 있다
		가장 최근 commit부터 상단에 출력된다
		출력결과의 commit 뒤에 붙는 16진수 해시코드는 해당 commit id 또는 체크섬이라고 부른다
		author 수정자, date 수정일자가 같이 나온다(언제 누가 무엇을 햇는지 모두 기록이 된다)
		
	git log --pretty=oneline
		커밋 기록을 출력할 때 옵션을 주어 한줄로 깔끔하게 볼 수 있다
	
	git checkout 체크섬(앞7자리) or 브랜치 이름 or -
		원하는 시점으로 이동하는 명령어이다
		log를 통해서 확인한 체크섬(앞7자리)을 복사 붙여넣기(ctrl + insert) 하거나 앞 7자리를 입력하면 해당 시점으로 이동한다
		체크섬 대신 -를 사용하면 가장 최근 커밋으로 돌아간다

* 삭제명령어와 복구 명령어
	git rm --cached <file> (삭제)
		rm 삭제 명령어 --cached 옵션과 함께 사용
		커밋을 한번도 하지 않은 상황에서 사용한다
		rm 명령어는 tracked 상태의 파일을 untracked 상태로 변경한다

	git restore --staged <file>e (복구)
		restore 복구 명령어 --staged 옵션을 함께 사용
		커밋이 되어 있는 상황에서 사용한다

	reset 명령어
		보통 커밋을 취소하는 용도로 이용된다
		staged 상태의 파일을 unstaged 상태로 변경할 때도 사용가능하다
-커밋해야만 HEAD가 생성

[예제]
	test02 폴더를 만든다	=> 폴더에서 폴더 생성
	git init	: 깃 저장소로 만든다
	test1.txt 파일을 만든다	=> 폴더에서 파일 생성
	git status
	git add.	: 스테이징 영역에 올린다
	git status
	git commit -m "241121 1610 파일 생성" : 커밋 메시지는 날짜 시간 파일생성 이라고 작성한다
	git status	: 커밋하게되면 status 상태에는 아무것도 남지 않아야한다
	git log		: 기록 확인
	test2.txt 파일을 만들고 파일에 본인이름을 작성한다		=> 폴더에서 파일생성 - 이름 입력 후 저장
	git status
	git add.	: 스테이징 영역에 올리고 커밋 메시지를 작성한다
	git status
	git commit -m "241121 1612 test2.txt파일에 내용입력" : 커밋메시지는 날짜 시간 test2.txt 파일에 내용입력 이라고 작성한다
	
[실습]
	test3 폴더를 git의 작업 공간으로 만든다
	test00.txt 파일에 git 실습이라는 내용을 넣고 저장한다
	test01.txt 파일에 git의 명령어(add, commit의 의미)를 쓰고 저장한다
	test02.txt 파일에 본인이름을 쓰고 저장한다
	3개의 폴더를 한번에 commit 하고 커밋 메시지로는 "day01 git 실습"으로 작성한다
	log 기록을 확인한다

7. 브랜치(branch)
	한 개의 저장소를 여러 갈래로 나누어 관리할 수 있게 해주는 개념
	브랜치들 끼리는 서로 영향을 받지 않기 때문에 개별적인 작업을 진행할 수 있다
	git은 기본적으로 master 브랜치를 메인으로 사용한다

1) git 브랜치 확인, 수정 명령어
	git branch
		현재 로컬의 브랜치들을 확인한다
	
	git branch -m master(기존이름) main(변경할 이름)
		master 브랜치 명을 main으로 변경한다

	git branch -D 브랜치명
		브랜치를 삭제한다

2) git과 git-hub의 메인 브랜치
	git의 기본 브랜치 명은 master
	git-hub의 기본 브랜치명은 main

	git-hub는 2020년에 인종차별과 관련된 문제(Black Lives Matter 운동 영향)으로 브랜치 이름을 main으로 변경했다
	브랜치 명이 다르면 사소한 문제가 발생하게 되므로 로컬의 브랜치 명을 main으로 변경하고 사용한다

8. 원격 저장소 관련 명령어
	git remote add 원격저장소이름(origin) 주소(git-hub 링크)
		원격저장소를 내 로컬과 연결하는 명령어
		원격 저장소 이름은 보통 origin을 사용하게 되는데 매번 주소를 입력할 필요 없이 우리가 지어준 이름인 origin을 사용하면된다
	git remote -v
		원격저장소와 로컬이 서로 연결이 잘 되어있는지 확인하는 명령어
	





































Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01
$ git config --list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
:...skipping...
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
user.name=koreait-2024
user.email=koreait2024@gmail.com
~
~
~
~
~
~

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01
$ git init
Initialized empty Git repository in D:/web_0900_kys/git/workspace/test01/.git/

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        test01.txt

nothing added to commit but untracked files present (use "git add" to track)

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git add test01.txt

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   test01.txt


Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git commit -m "241121 첫번째 커밋"
[master (root-commit) bac02fa] 241121 첫번째 커밋
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 test01.txt

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git log
commit bac02faf2a0520f9acced979dcd23bfa5e1b912b (HEAD -> master)
Author: koreait-2024 <koreait2024@gmail.com>
Date:   Thu Nov 21 15:34:18 2024 +0900

    241121 첫번째 커밋

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   test01.txt

no changes added to commit (use "git add" and/or "git commit -a")

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git commit -m "test01.txt 파일 내용 수정"
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   test01.txt

no changes added to commit (use "git add" and/or "git commit -a")

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git add .

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   test01.txt


Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git commit -m "test01.txt 파일 내용 수정"
[master a0959ec] test01.txt 파일 내용 수정
 1 file changed, 1 insertion(+)

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$ git log
commit a0959ec5473a5413cc3f16a0ccf3ce4bd6e52265 (HEAD -> master)
Author: koreait-2024 <koreait2024@gmail.com>
Date:   Thu Nov 21 15:37:45 2024 +0900

    test01.txt 파일 내용 수정

commit bac02faf2a0520f9acced979dcd23bfa5e1b912b
Author: koreait-2024 <koreait2024@gmail.com>
Date:   Thu Nov 21 15:34:18 2024 +0900

    241121 첫번째 커밋

Administrator@DESKTOP-HUJUVSS MINGW64 /d/web_0900_kys/git/workspace/test01 (master)
$

















































